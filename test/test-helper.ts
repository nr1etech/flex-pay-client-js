import { StorageState, TransactionType } from "../src";

export function consoleJson(input:unknown) {
	if (input !== undefined) {
		console.log(JSON.stringify(input, null, 2));
	}
}

export async function sleep(seconds:number) {
	await new Promise(r => {
		console.info(`sleeping for ${seconds}s`);
		setTimeout(r, seconds * 1000)
	});
}

export function generateUniqueMerchantTransactionId() {
	return (new Date()).getTime().toString() + Math.floor(Math.random() * 10000);
}

export const EmptyObjectBuilder = {
	paymentMethodUpdateResponse: () => ({
		paymentMethod: {
			paymentMethodId: expect.any(String),
			creditCardNumber: null,
			expiryMonth: null,
			expiryYear: null,
			cvv: null,
			firstName: null,
			lastName: null,
			fullName: null,
			customerId: null,
			address1: null,
			address2: null,
			postalCode: null,
			city: null,
			state: null,
			country: null,
			email: null,
			phoneNumber: null,
			paymentMethodType: null,
			fingerprint: null,
			lastFourDigits: null,
			firstSixDigits: null,
			cardType: null,
			dateCreated: expect.any(Date),
			storageState: null,
		},
		customerId: expect.any(String),
		responseCode: null,
		message: expect.any(String),
		transactionDate: expect.any(Date),
		transactionId: expect.any(String),
		transactionStatus: null,
		transactionType: TransactionType.UpdatePaymentMethod,
	}),

	chargeResponse: () => ({
		response: {
			avsCode: null,
			avsMessage: expect.any(String),
			cvvCode: null,
			cvvMessage: expect.any(String),
			errorCode: null,
			errorDetail: expect.any(String),
		},
		paymentMethod: {
			paymentMethodId: expect.any(String),
			creditCardNumber: null,
			expiryMonth: null,
			expiryYear: null,
			cvv: null,
			firstName: null,
			lastName: null,
			fullName: null,
			customerId: null,
			address1: null,
			address2: null,
			postalCode: null,
			city: null,
			state: null,
			country: null,
			email: null,
			phoneNumber: null,
			paymentMethodType: null,
			fingerprint: null,
			lastFourDigits: null,
			firstSixDigits: null,
			cardType: null,
			dateCreated: expect.any(Date),
			storageState: null,
		},
		transactionId: expect.any(String),
		transactionDate: expect.any(Date),
		transactionStatus: null,
		message: null,
		responseCode: null,
		transactionType: TransactionType.Charge,
		merchantTransactionId: null,
		customerId: null,
		currencyCode: null,
		amount: expect.any(Number),
		gatewayToken: expect.any(String),
		gatewayType: expect.any(String),
		gatewayTransactionId: expect.any(String),
		merchantAccountReferenceId: expect.any(String),
		assignedGatewayToken: expect.any(String),
		orderId: null,
		retryDate: null,
		retryCount: null,
		dateFirstAttempt: expect.any(Date),
		description: null,
		customerIp: null,
		shippingAddress: {
			address1: null,
			address2: null,
			postalCode: null,
			city: null,
			state: null,
			country: null,
		},
		referenceData: expect.any(String),
		disableCustomerRecovery: false,
		engagedRecoveryState: 0,
		customVariable1: null,
		customVariable2: null,
		customVariable3: null,
		customVariable4: null,
		customVariable5: null,
		paymentModel: expect.any(String),

		productSku: null,
		subscriptionId: null,
	}),

	authResponse: () => ({
		response: {
			avsCode: null,
			avsMessage: expect.any(String),
			cvvCode: null,
			cvvMessage: expect.any(String),
			errorCode: null,
			errorDetail: "",
		},
		paymentMethod: {
			paymentMethodId: expect.any(String),
			creditCardNumber: expect.any(String),
			expiryMonth: null,
			expiryYear: null,
			cvv: expect.any(String),
			firstName: null,
			lastName: null,
			fullName: null,
			customerId: null,
			address1: null,
			address2: null,
			postalCode: null,
			city: null,
			state: null,
			country: null,
			email: null,
			phoneNumber: null,
			paymentMethodType: null,
			fingerprint: expect.any(String),
			lastFourDigits: null,
			firstSixDigits: null,
			cardType: null,
			dateCreated: expect.any(Date),
			storageState: StorageState.Cached
		},
		transactionId: expect.any(String),
		transactionDate: expect.any(Date),
		transactionStatus: null,
		message: expect.any(String),
		responseCode: null,
		transactionType: TransactionType.Authorize,
		merchantTransactionId: expect.any(String),
		customerId: null,
		currencyCode: null,
		amount: expect.any(Number),
		gatewayToken: expect.any(String),
		gatewayType: expect.any(String),
		gatewayTransactionId: expect.any(String),
		merchantAccountReferenceId: expect.any(String),
		assignedGatewayToken: expect.any(String),
		orderId: null,
		retryDate: expect.any(Date),
		retryCount: expect.any(Number),
		dateFirstAttempt: expect.any(Date),
		description: null,
		customerIp: null,
		shippingAddress: {
			address1: null,
			address2: null,
			postalCode: null,
			city: null,
			state: null,
			country: null,
		},
		referenceData: expect.any(String),
		disableCustomerRecovery: false,
		engagedRecoveryState: 0,
		customVariable1: null,
		customVariable2: null,
		customVariable3: null,
		customVariable4: null,
		customVariable5: null,
		paymentModel: expect.any(String),

		productSku: null,
		subscriptionId: null,
	}),

	captureResponse: () => ({
		response: {
			avsCode: null,
			avsMessage: expect.any(String),
			cvvCode: null,
			cvvMessage: expect.any(String),
			errorCode: null,
			errorDetail: "",
		},
		paymentMethod: {
			paymentMethodId: expect.any(String),
			creditCardNumber: null,
			expiryMonth: null,
			expiryYear: null,
			cvv: null,
			firstName: null,
			lastName: null,
			fullName: null,
			customerId: null,
			address1: null,
			address2: null,
			postalCode: null,
			city: null,
			state: null,
			country: null,
			email: null,
			phoneNumber: null,
			paymentMethodType: null,
			fingerprint: null,
			lastFourDigits: null,
			firstSixDigits: null,
			cardType: null,
			dateCreated: expect.any(Date),
			storageState: null,
		},
		transactionId: expect.any(String),
		transactionDate: expect.any(Date),
		transactionStatus: expect.any(Number),
		message: expect.any(String),
		responseCode: expect.any(String),
		transactionType: expect.any(String),
		merchantTransactionId: expect.any(String),
		customerId: expect.any(String),
		currencyCode: "USD",
		amount: 1000,
		gatewayToken: expect.any(String),
		gatewayType: expect.any(String),
		gatewayTransactionId: expect.any(String),
		merchantAccountReferenceId: expect.any(String),
		assignedGatewayToken: expect.any(String),
		orderId: expect.any(String),
		retryDate: null,
		retryCount: 0,
		dateFirstAttempt: expect.any(Date),
		description: null,
		productSku: null,
		subscriptionId: null,
		customerIp: null,
		shippingAddress: {
			address1: null,
			address2: null,
			postalCode: null,
			city: null,
			state: null,
			country: null,
		},
		referenceData: expect.any(String),
		disableCustomerRecovery: false,
		engagedRecoveryState: 0,
		customVariable1: null,
		customVariable2: null,
		customVariable3: null,
		customVariable4: null,
		customVariable5: null,
	}),

	voidResponse: () => ({
		response: {
			avsCode: null,
			avsMessage: null,
			cvvCode: null,
			cvvMessage: null,
			errorCode: null,
			errorDetail: null,
		},
		paymentMethod: {
			paymentMethodId: expect.any(String),
			creditCardNumber: null,
			expiryMonth: null,
			expiryYear: null,
			cvv: null,
			firstName: null,
			lastName: null,
			fullName: null,
			customerId: expect.any(String),
			address1: null,
			address2: null,
			postalCode: null,
			city: null,
			state: null,
			country: null,
			email: null,
			phoneNumber: null,
			paymentMethodType: expect.any(String),
			fingerprint: null,
			lastFourDigits: expect.any(String),
			firstSixDigits: expect.any(String),
			cardType: null,
			dateCreated: expect.any(Date),
			storageState: expect.any(String),
		},
		transactionId: expect.any(String),
		transactionDate: expect.any(Date),
		transactionStatus: expect.any(String),
		message: expect.any(String),
		responseCode: expect.any(String),
		transactionType: TransactionType.Void,
		merchantTransactionId: expect.any(String),
		customerId: expect.any(String),
		currencyCode: expect.any(String),
		amount: expect.any(Number),
		gatewayToken: expect.any(String),
		gatewayType: expect.any(String),
		gatewayTransactionId: null,
		merchantAccountReferenceId: null,
		assignedGatewayToken: expect.any(String),
		orderId: expect.any(String),
		retryDate: null,
		retryCount: expect.any(Number),
		dateFirstAttempt: expect.any(Date),
		description: null,
		customerIp: null,
		shippingAddress: {
			address1: null,
			address2: null,
			postalCode: null,
			city: null,
			state: null,
			country: null,
		},
		referenceData: expect.any(String),
		disableCustomerRecovery: false,
		engagedRecoveryState: 0,
		customVariable1: null,
		customVariable2: null,
		customVariable3: null,
		customVariable4: null,
		customVariable5: null,

		productSku: null,
		subscriptionId: null,
	}),

	refundResponse: () => ({
		response: {
			avsCode: null,
			avsMessage: null,
			cvvCode: null,
			cvvMessage: null,
			errorCode: null,
			errorDetail: null,
		},
		paymentMethod: {
			paymentMethodId: expect.any(String),
			creditCardNumber: null,
			expiryMonth: null,
			expiryYear: null,
			cvv: null,
			firstName: null,
			lastName: null,
			fullName: null,
			customerId: expect.any(String),
			address1: null,
			address2: null,
			postalCode: null,
			city: null,
			state: null,
			country: null,
			email: null,
			phoneNumber: null,
			paymentMethodType: expect.any(String),
			fingerprint: null,
			lastFourDigits: expect.any(String),
			firstSixDigits: expect.any(String),
			cardType: null,
			dateCreated: expect.any(Date),
			storageState: expect.any(String),
		},
		transactionId: expect.any(String),
		transactionDate: expect.any(Date),
		transactionStatus: expect.any(String),
		message: expect.any(String),
		responseCode: expect.any(String),
		transactionType: TransactionType.Refund,
		merchantTransactionId: expect.any(String),
		customerId: expect.any(String),
		currencyCode: expect.any(String),
		amount: expect.any(Number),
		gatewayToken: expect.any(String),
		gatewayType: expect.any(String),
		gatewayTransactionId: null,
		merchantAccountReferenceId: null,
		assignedGatewayToken: expect.any(String),
		orderId: expect.any(String),
		retryDate: null,
		retryCount: expect.any(Number),
		dateFirstAttempt: expect.any(Date),
		description: null,
		customerIp: null,
		shippingAddress: {
			address1: null,
			address2: null,
			postalCode: null,
			city: null,
			state: null,
			country: null,
		},
		referenceData: expect.any(String),
		disableCustomerRecovery: false,
		engagedRecoveryState: 0,
		customVariable1: null,
		customVariable2: null,
		customVariable3: null,
		customVariable4: null,
		customVariable5: null,

		productSku: null,
		subscriptionId: null,
	}),

};
